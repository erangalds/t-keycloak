services:
  keycloak:
    image: quay.io/keycloak/keycloak:latest
    container_name: keycloak
    volumes:
      - ./themes:/opt/keycloak/themes/
      - ./providers:/opt/keycloak/providers/
      - ./certs:/opt/keycloak/certs:ro # Mount certs directory as read-only
    command:
      - start
    environment:
      # Admin Credentials
      KC_BOOTSTRAP_ADMIN_USERNAME: ${KEYCLOAK_ADMIN_USER}
      KC_BOOTSTRAP_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      #  Database Configuration
      KC_DB: postgres
      KC_DB_URL_HOST: keycloak-postgres
      KC_DB_URL_DATABASE: ${POSTGRES_DB}
      KC_DB_USERNAME: ${POSTGRES_USER}
      KC_DB_PASSWORD: ${POSTGRES_PASSWORD}
      KC_DB_SCHEMA: public
      # HTTPS / TLS Configuration
      KC_HTTPS_PORT: 8443
      KC_HTTPS_KEY_STORE_FILE: /opt/keycloak/certs/keystore.jks
      KC_HTTPS_KEY_STORE_PASSWORD: ${CERT_PASS} # âœ… ADDED: Keystore password environment variable
      KC_HTTPS_CLIENT_AUTH: none
      #KC_HTTP_ENABLED: false
      # Host Configurations
      KC_HOSTNAME: keycloak
      KC_HOSTNAME_STRICT: "false"

    ports:
      - "8443:8443"
      - "8080:8080" # Optional: Keep if you need for redirects/debugging, remove if only HTTPS
    depends_on:
      keycloak-postgres:
        condition: service_healthy
    networks:
      - keycloak_net
    restart: unless-stopped

  kcadm:
    build:
      context: .
      dockerfile: Dockerfile.kcadm
    # Keep the container running so we can exec into it
    entrypoint: ["tail", "-f", "/dev/null"]
    env_file:
      - .env # This ensures variables are always loaded for docker compose run commands
    container_name: keycloak_cli
    volumes:
      - kcadm_data:/home/keycloak:delegated # Mount to the user's home directory
      - ./certs:/opt/keycloak/certs:ro # Mount certs to trust the Keycloak server
    networks:
      - keycloak_net
    restart: unless-stopped

  keycloak-postgres:
    image: postgres:17
    container_name: keycloak-postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - keycloak_net
    restart: unless-stopped

  my-flask-app:
    build:
      context: .
      dockerfile: Dockerfile.flask
    container_name: my-flask-app
    ports:
      - "8090:8090"
    env_file: .env
    volumes:
      - ./flask-app:/app # Mount the flask app code for live reloading
      - ./certs:/app/certs:ro # Mount certs for TLS verification
    networks:
      - keycloak_net
    depends_on:
      - keycloak
    restart: unless-stopped
    # Keep the container running for development, so we can exec into it.
    entrypoint: ["tail", "-f", "/dev/null"]

  my-resource-api:
    build:
      context: .
      dockerfile: Dockerfile.flask
    container_name: my-resource-api
    ports:
      - "8091:8091"
    env_file: .env
    volumes:
      - ./flask-app:/app
      - ./certs:/app/certs:ro
    networks:
      - keycloak_net
    depends_on:
      - keycloak
    restart: unless-stopped
    entrypoint: ["tail", "-f", "/dev/null"]

networks:
  keycloak_net:
volumes:
  postgres_data:
  kcadm_data: